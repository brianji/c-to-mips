{
  "name": "C to MIPS",
  "tagline": "Translate C to MIPS with OCaml",
  "body": "# Process C with OCaml\r\n\r\nUtilities for formatting and evaluating parsed C code. Written in OCaml.\r\n\r\n[![Build Status](https://travis-ci.org/brianji/pcwo.svg?branch=master)](https://travis-ci.org/brianji/pcwo)\r\n\r\n## Requirements\r\n- OCaml\r\n- OCamllex\r\n- OCamlyacc\r\n- OUnit\r\n- GNU Make\r\n\r\n## Getting Started\r\n### Directories\r\n#### root\r\nSource files for project:\r\n- ast.ml - Abstract syntax tree type\r\n- directives.ml - Directive matching for lexer\r\n- eval.ml - Evaluate C code\r\n- keywords.ml - Keyword matching for lexer\r\n- lexer.mll - C lexer with OCamllex\r\n- operators.ml - Operator matching for lexer\r\n- parser.mly - C parser with OCamlyacc\r\n- pretty_print.ml - Format C code\r\n\r\n#### test\r\nUnit tests for project using OUnit:\r\n- input - directory of input files for testing\r\n  - arith.c - operators\r\n  - basic.c - function and globals\r\n  - call.c - function call\r\n  - dec.c - declaration\r\n  - ifelse - if-else statements\r\n- trees.ml - ASTs used in testing\r\n- test_parser.ml - Unit tests for lexing and parsing\r\n\r\n### Compile\r\nRunning `make` in the root directory will compile the utilities and generate executables, pretty_print and eval, in the root directory. Other generated files will be ignored by git.\r\n\r\n### Testing\r\nRunning `make test` in the root directory will compile the utilities, tests, and then run the tests.\r\n\r\n### Execute\r\nThe utilities take input from stdin until EOF.\r\n\r\n## Features\r\n### Lexer / Parser\r\nGenerate Abstract Syntax tree by lexing and parsing C code.\r\n### Pretty Print\r\nFormats C code by parsing input and regenerating the code.\r\n### Evaluate\r\nEvaluates C code by parsing input and returning to the console the value that main() returns.\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}